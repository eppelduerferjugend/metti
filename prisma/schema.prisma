// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  assignedOrders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  orders Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  color String?
  unitPrice Int
  unitCost Int?
  available Boolean @default(true)
  position Int
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
  categories ProductCategory[]
  orders LineItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductCategory {
  id Int @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  description String?
  parentId Int?
  parent ProductCategory? @relation("ProductCategoryChildren", fields: [parentId], references: [id])
  children ProductCategory[] @relation("ProductCategoryChildren")
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderState {
  pending
  canceled
  completed
}

model Order {
  id Int @id @default(autoincrement())
  storeId Int
  store Store @relation(fields: [storeId], references: [id])
  number String @unique @db.VarChar(255)
  state OrderState @default(pending)
  items LineItem[]
  note String?
  tableId Int?
  table Table? @relation(fields: [tableId], references: [id])
  assigneeId Int
  assignee User @relation(fields: [assigneeId], references: [id])
  printerJobs PrinterJob[]
  test Boolean
  transitionedAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LineItem {
  orderId Int
  order Order @relation(fields: [orderId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  productId Int
  product Product @relation(fields: [productId], references: [id])
  quantity Int
  @@id([orderId, productId])
}

model Store {
  id Int @id @default(autoincrement())
  slug String @unique @db.VarChar(255)
  name String @unique @db.VarChar(255)
  description String
  numberPrefix String @unique @db.VarChar(255)
  products Product[]
  orders Order[]
  newOrderReceiptPrinter String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PrinterJobState {
  pending
  completed
}

model PrinterJob {
  id Int @id @default(autoincrement())
  state PrinterJobState @default(pending)
  printer String @db.VarChar(255)
  content String
  orderId Int?
  order Order? @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
